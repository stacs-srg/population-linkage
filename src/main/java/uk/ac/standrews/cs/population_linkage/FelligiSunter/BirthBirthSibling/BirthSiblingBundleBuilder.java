/*
 * Copyright 2022 Systems Research Group, University of St Andrews:
 * <https://github.com/stacs-srg>
 *
 * This file is part of the module population-linkage.
 *
 * population-linkage is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * population-linkage is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with population-linkage. If not, see
 * <http://www.gnu.org/licenses/>.
 */
package uk.ac.standrews.cs.population_linkage.FelligiSunter.BirthBirthSibling;

import uk.ac.standrews.cs.neoStorr.impl.exceptions.BucketException;
import uk.ac.standrews.cs.neoStorr.impl.exceptions.RepositoryException;
import uk.ac.standrews.cs.population_linkage.compositeMeasures.LXPMeasure;
import uk.ac.standrews.cs.population_linkage.graph.Query;
import uk.ac.standrews.cs.population_linkage.linkageRecipes.LinkageRecipe;
import uk.ac.standrews.cs.population_linkage.linkageRunners.BitBlasterLinkageRunner;
import uk.ac.standrews.cs.population_linkage.linkageRunners.MakePersistent;
import uk.ac.standrews.cs.population_linkage.supportClasses.Constants;
import uk.ac.standrews.cs.population_linkage.supportClasses.Link;
import uk.ac.standrews.cs.population_linkage.supportClasses.LinkageQuality;
import uk.ac.standrews.cs.population_linkage.supportClasses.LinkageResult;
import uk.ac.standrews.cs.population_records.record_types.Birth;
import uk.ac.standrews.cs.utilities.measures.coreConcepts.StringMeasure;

import java.util.Arrays;
import java.util.List;

/**
 * This class attempts to perform birth-birth sibling linkage.
 */
public class BirthSiblingBundleBuilder implements MakePersistent {

// Generated by uk.ac.standrews.cs.population_linkage.groundTruth.umeaFS.BirthBirthSibling.BirthBirthSiblingPrior on 2022-12-05

    // expected_matches = 880284
    private static final double m_prior = 1.2023514274608923E-5;
    private static final double u_prior = 1d - m_prior;
    public static final double odds_prior = m_prior/u_prior;

    // u baby_mother_mother_first match = 162
// u baby_mother_mother_first unmatched = 26692
// u Total = 26854
    private static final double u_prior_baby_mother_mother_first = 0.006032621;
    // u baby_mother_surname match = 227
// u baby_mother_surname unmatched = 26627
// u Total = 26854
    private static final double u_prior_baby_mother_surname = 0.008453117;
    // m baby_mother_mother_first match = 642414
// m baby_mother_mother_first unmatched = 404766
// m Total = 1047180
    private static final double m_prior_baby_mother_mother_first = 0.61347044;
    // m baby_mother_surname match = 656220
// m baby_mother_surname unmatched = 390960
// m Total = 1047180
    private static final double m_prior_baby_mother_surname = 0.62665445;
    // u baby_father_first match = 582
// u baby_father_first unmatched = 26299
// u Total = 26881
    private static final double u_prior_baby_father_first = 0.021650981;
    // u baby_father_surname match = 439
// u baby_father_surname unmatched = 26442
// u Total = 26881
    private static final double u_prior_baby_father_surname = 0.016331237;
    // m baby_father_first match = 715904
// m baby_father_first unmatched = 331276
// m Total = 1047180
    private static final double m_prior_baby_father_first = 0.6836494;
    // m baby_father_surname match = 812972
// m baby_father_surname unmatched = 234208
// m Total = 1047180
    private static final double m_prior_baby_father_surname = 0.77634406;
    // u pom match = 21159
// u pom unmatched = 5820
// u Total = 26979
    private static final double u_prior_pom = 0.78427666;
    // u dom match = 5024
// u dom unmatched = 21955
// u Total = 26979
    private static final double u_prior_dom = 0.18621892;
    // m pom match = 1047180
// m pom unmatched = 0
// m Total = 1047180
    private static final double m_prior_pom = 1.0;
    // m dom match = 1047180
// m dom unmatched = 0
// m Total = 1047180
    private static final double m_prior_dom = 1.0;
    // u mom match = 5937
// u mom unmatched = 21122
// u Total = 27059
    private static final double u_prior_mom = 0.21940944;
    // u yom match = 4751
// u yom unmatched = 22308
// u Total = 27059
    private static final double u_prior_yom = 0.1755793;
    // m mom match = 1047180
// m mom unmatched = 0
// m Total = 1047180
    private static final double m_prior_mom = 1.0;
    // m yom match = 1047180
// m yom unmatched = 0
// m Total = 1047180
    private static final double m_prior_yom = 1.0;

    public static final List<Double> m_priors = Arrays.asList( new Double[]{ m_prior_baby_mother_mother_first,m_prior_baby_mother_surname,m_prior_baby_father_first,m_prior_baby_father_surname,m_prior_pom,m_prior_dom,m_prior_mom,m_prior_yom} );
    public static final List<Double> u_priors = Arrays.asList( new Double[]{ u_prior_baby_mother_mother_first,u_prior_baby_mother_surname,u_prior_baby_father_first,u_prior_baby_father_surname,u_prior_pom,u_prior_dom,u_prior_mom,u_prior_yom } );


    public static BirthSiblingLinkageRecipe getRecipe(String sourceRepo, String number_of_records) {
        return new BirthSiblingLinkageRecipe(sourceRepo, number_of_records, m_priors, u_priors, odds_prior, BirthSiblingBundleBuilder.class.getName() );
    }

    public static void main(String[] args) throws Exception {

        String sourceRepo = args[0];  // e.g. umea
        String number_of_records = args[1]; // e.g. EVERYTHING or 10000 etc.
        StringMeasure base_measure = Constants.get(args[2]);
        double threshold = Double.parseDouble(args[3]);

        try(BirthSiblingLinkageRecipe linkageRecipe = new BirthSiblingLinkageRecipe(sourceRepo, number_of_records, m_priors, u_priors, odds_prior, BirthSiblingBundleBuilder.class.getName() ) ) {

            LXPMeasure record_distance_measure = new LXPMeasure(linkageRecipe.getLinkageFields(), linkageRecipe.getQueryMappingFields(), base_measure);
            BitBlasterLinkageRunner runner = new BitBlasterLinkageRunner(record_distance_measure, threshold);

            int linkage_fields = linkageRecipe.ALL_LINKAGE_FIELDS;
            int half_fields = linkage_fields - (linkage_fields / 2);

            while (linkage_fields >= half_fields) {

                linkageRecipe.setNumberLinkageFieldsRequired(linkage_fields);
                LinkageResult lr = runner.run(linkageRecipe, new BirthSiblingBundleBuilder(), false, true); // TODO Cypher errors if evaluateQuality is tru
                LinkageQuality quality = lr.getLinkageQuality();
                quality.print(System.out);
                linkage_fields--;
            }
        }
    }

    @Override
    public void makePersistent(LinkageRecipe recipe, Link link) {
        try {

            String std_id1 = link.getRecord1().getReferend(Birth.class).getString(Birth.STANDARDISED_ID);
            String std_id2 = link.getRecord2().getReferend(Birth.class).getString( Birth.STANDARDISED_ID );

            if( !std_id1.equals(std_id2 ) ) {

                if (!Query.BBBirthSiblingReferenceExists(recipe.getBridge(), std_id1, std_id2, recipe.getLinksPersistentName())) {
                    Query.createBBSiblingReference(
                            recipe.getBridge(),
                            std_id1,
                            std_id2,
                            recipe.getLinksPersistentName(),
                            recipe.getNumberOfLinkageFieldsRequired(),
                            link.getDistance());
                }
            }
        } catch (BucketException | RepositoryException e) {
            throw new RuntimeException(e);
        }
    }

}
