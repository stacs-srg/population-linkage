/*
 * Copyright 2022 Systems Research Group, University of St Andrews:
 * <https://github.com/stacs-srg>
 *
 * This file is part of the module population-linkage.
 *
 * population-linkage is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * population-linkage is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with population-linkage. If not, see
 * <http://www.gnu.org/licenses/>.
 */
package uk.ac.standrews.cs.population_linkage.FelligiSunter.BirthParentsMarriage;

import uk.ac.standrews.cs.neoStorr.impl.exceptions.BucketException;
import uk.ac.standrews.cs.neoStorr.impl.exceptions.RepositoryException;
import uk.ac.standrews.cs.population_linkage.compositeMeasures.LXPMeasure;
import uk.ac.standrews.cs.population_linkage.graph.Query;
import uk.ac.standrews.cs.population_linkage.linkageRecipes.LinkageRecipe;
import uk.ac.standrews.cs.population_linkage.linkageRunners.BitBlasterLinkageRunner;
import uk.ac.standrews.cs.population_linkage.linkageRunners.MakePersistent;
import uk.ac.standrews.cs.population_linkage.supportClasses.Constants;
import uk.ac.standrews.cs.population_linkage.supportClasses.Link;
import uk.ac.standrews.cs.population_linkage.supportClasses.LinkageQuality;
import uk.ac.standrews.cs.population_linkage.supportClasses.LinkageResult;
import uk.ac.standrews.cs.population_records.record_types.Birth;
import uk.ac.standrews.cs.population_records.record_types.Marriage;
import uk.ac.standrews.cs.utilities.measures.coreConcepts.StringMeasure;

import java.util.Arrays;
import java.util.List;

/**
 *  This class attempts to find birth-parents Marriage links
 *  This STRONG: uses the 2 names of the mother and father plus DOM and POM.
 */
public class BirthParentsMarriageBuilder implements MakePersistent {

// Generated by uk.ac.standrews.cs.population_linkage.groundTruth.umeaFS.Priors.BirthParentsMarriage.BrideParentsMarriagePrior on 2022-11-29

    // expected_matches = 59712
    private static final double m_prior = 7.487238779414967E-5;
    private static final double u_prior = 1d - m_prior;
    public static final double odds_prior = m_prior/u_prior;

    // u bride_mother_first match = 79
// u bride_mother_first unmatched = 25117
// u Total = 25196
    private static final double u_prior_bride_mother_first = 0.0031354183;
    // u bride_mother_second match = 113
// u bride_mother_second unmatched = 25083
// u Total = 25196
    private static final double u_prior_bride_mother_second = 0.004484839;
    // m bride_mother_first match = 109620
// m bride_mother_first unmatched = 77934
// m Total = 187554
    private static final double m_prior_bride_mother_first = 0.58447164;
    // m bride_mother_second match = 103344
// m bride_mother_second unmatched = 84210
// m Total = 187554
    private static final double m_prior_bride_mother_second = 0.5510093;
    // u father_first match = 350
// u father_first unmatched = 24794
// u Total = 25144
    private static final double u_prior_father_first = 0.013919822;
    // u father_surname match = 247
// u father_surname unmatched = 24897
// u Total = 25144
    private static final double u_prior_father_surname = 0.009823417;
    // m father_first match = 114829
// m father_first unmatched = 72725
// m Total = 187554
    private static final double m_prior_father_first = 0.612245;
    // m father_surname match = 120781
// m father_surname unmatched = 66773
// m Total = 187554
    private static final double m_prior_father_surname = 0.64397985;
    // u pom match = 17109
// u pom unmatched = 8252
// u Total = 25361
    private static final double u_prior_pom = 0.6746185;
    // u dom match = 743
// u dom unmatched = 24618
// u Total = 25361
    private static final double u_prior_dom = 0.029296951;
    // m pom match = 182207
// m pom unmatched = 5347
// m Total = 187554
    private static final double m_prior_pom = 0.97149086;
    // m dom match = 166984
// m dom unmatched = 20570
// m Total = 187554
    private static final double m_prior_dom = 0.8903249;
    // u mom match = 1766
// u mom unmatched = 23575
// u Total = 25341
    private static final double u_prior_mom = 0.06968944;
    // u yom match = 215
// u yom unmatched = 25126
// u Total = 25341
    private static final double u_prior_yom = 0.008484274;
    // m mom match = 168080
// m mom unmatched = 19474
// m Total = 187554
    private static final double m_prior_mom = 0.8961686;
    // m yom match = 167444
// m yom unmatched = 20110
// m Total = 187554
    private static final double m_prior_yom = 0.89277756;

    public static final List<Double> m_priors = Arrays.asList(m_prior_bride_mother_first,m_prior_bride_mother_second,m_prior_father_first,m_prior_father_surname,m_prior_pom,m_prior_dom,m_prior_mom,m_prior_yom);
    public static final List<Double> u_priors = Arrays.asList(u_prior_bride_mother_first,u_prior_bride_mother_second,u_prior_father_first,u_prior_father_surname,u_prior_pom,u_prior_dom,u_prior_mom,u_prior_yom);

    public static BirthParentsMarriageIdentityLinkageRecipe getRecipe(String sourceRepo, String number_of_records) {
        return new BirthParentsMarriageIdentityLinkageRecipe(sourceRepo, number_of_records, m_priors, u_priors, odds_prior, BirthParentsMarriageBuilder.class.getName() );
    }

    public static void main(String[] args) throws Exception {

        String sourceRepo = args[0];  // e.g. umea
        String number_of_records = args[1]; // e.g. EVERYTHING or 10000 etc.
        StringMeasure base_measure = Constants.get(args[2]);
        double threshold = Double.parseDouble(args[3]);

        try (
             BirthParentsMarriageIdentityLinkageRecipe linkageRecipe = getRecipe(sourceRepo,number_of_records); ) {

            LXPMeasure record_distance_measure = new LXPMeasure(linkageRecipe.getLinkageFields(), linkageRecipe.getQueryMappingFields(), base_measure);
            BitBlasterLinkageRunner runner = new BitBlasterLinkageRunner(record_distance_measure, threshold);

            int linkage_fields = linkageRecipe.ALL_LINKAGE_FIELDS;
            int half_fields = linkage_fields - (linkage_fields / 2 );

            while( linkage_fields >= half_fields ) {
                linkageRecipe.setNumberLinkageFieldsRequired(linkage_fields);
                LinkageResult lr = runner.run(linkageRecipe, new BirthParentsMarriageBuilder(), false, true);
                LinkageQuality quality = lr.getLinkageQuality();
                quality.print(System.out);
                linkage_fields--;
            }
            System.out.println("Run finished");
        }
    }

    @Override
    public void makePersistent(LinkageRecipe recipe, Link link) {
        try {

            String std_id1 = link.getRecord1().getReferend(Birth.class).getString( Birth.STANDARDISED_ID );
            String std_id2 = link.getRecord2().getReferend(Marriage.class).getString( Marriage.STANDARDISED_ID );

                if (!Query.BMBirthFatherReferenceExists(recipe.getBridge(), std_id1, std_id2, recipe.getLinksPersistentName())) {
                    Query.createBMFatherReference(
                            recipe.getBridge(),
                            std_id1,
                            std_id2,
                            recipe.getLinksPersistentName(),
                            recipe.getNumberOfLinkageFieldsRequired(),
                            link.getDistance());
                }
                if (!Query.BMBirthMotherReferenceExists(recipe.getBridge(), std_id1, std_id2, recipe.getLinksPersistentName())) {
                    Query.createBMMotherReference(
                            recipe.getBridge(),
                            std_id1,
                            std_id2,
                            recipe.getLinksPersistentName(),
                            recipe.getNumberOfLinkageFieldsRequired(),
                            link.getDistance());
                }
        } catch (BucketException | RepositoryException e) {
            throw new RuntimeException(e);
        }
    }
}
